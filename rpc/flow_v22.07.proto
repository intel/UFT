syntax = "proto3";
package flow;

message rte_flow_item_vf {
	uint32 id=1 ; /**< VF ID. */
}

message rte_flow_item_phy_port {
	uint32 index=1 ; /**< Physical port index. */
}

message rte_flow_item_port_id {
	uint32 id=1 ; /**< DPDK port ID. */
}

message rte_flow_action_phy_port {
	uint32 original = 1; /**< Use original port index if possible. */
	uint32 reserved = 2; /**< Reserved, must be zero. */
	uint32 index = 3; /**< Physical port index. */
}

message ports_information {
    uint32 port_id = 1;
    string port_pci = 2;
    string port_mode = 3;
}

enum rte_flow_item_type {
	/**
	 * [META]
	 *
	 * End marker for item lists. Prevents further processing of items;
	 * thereby ending the pattern.
	 *
	 * No associated specification messageure.
	 */
	RTE_FLOW_ITEM_TYPE_END=0;

	/**
	 * [META]
	 *
	 * Used as a placeholder for convenience. It is ignored and simply
	 * discarded by PMDs.
	 *
	 * No associated specification messageure.
	 */
	RTE_FLOW_ITEM_TYPE_VOID=1;

	/**
	 * [META]
	 *
	 * Inverted matching; i.e. process packets that do not match the
	 * pattern.
	 *
	 * No associated specification messageure.
	 */
	RTE_FLOW_ITEM_TYPE_INVERT=2;

	/**
	 * Matches any protocol in place of the current layer; a single ANY
	 * may also stand for several protocol layers.
	 *
	 * See message rte_flow_item_any.
	 */
	RTE_FLOW_ITEM_TYPE_ANY=3;

	/**
	 * [META]
	 *
	 * Matches traffic originating from (ingress) or going to (egress)
	 * the physical function of the current device.
	 *
	 * No associated specification messageure.
	 */
	RTE_FLOW_ITEM_TYPE_PF=4;

	/**
	 * [META]
	 *
	 * Matches traffic originating from (ingress) or going to (egress) a
	 * given virtual function of the current device.
	 *
	 * See message rte_flow_item_vf.
	 */
	RTE_FLOW_ITEM_TYPE_VF=5;

	/**
	 * [META]
	 *
	 * Matches traffic originating from (ingress) or going to (egress) a
	 * physical port of the underlying device.
	 *
	 * See message rte_flow_item_phy_port.
	 */
	RTE_FLOW_ITEM_TYPE_PHY_PORT=6;

	/**
	 * [META]
	 *
	 * Matches traffic originating from (ingress) or going to (egress) a
	 * given DPDK port ID.
	 *
	 * See message rte_flow_item_port_id.
	 */
	RTE_FLOW_ITEM_TYPE_PORT_ID=7;

	/**
	 * Matches a byte string of a given length at a given offset.
	 *
	 * See message rte_flow_item_raw.
	 */
	RTE_FLOW_ITEM_TYPE_RAW=8;

	/**
	 * Matches an Ethernet header.
	 *
	 * See message rte_flow_item_eth.
	 */
	RTE_FLOW_ITEM_TYPE_ETH=9;

	/**
	 * Matches an 802.1Q/ad VLAN tag.
	 *
	 * See message rte_flow_item_vlan.
	 */
	RTE_FLOW_ITEM_TYPE_VLAN=10;

	/**
	 * Matches an IPv4 header.
	 *
	 * See message rte_flow_item_ipv4.
	 */
	RTE_FLOW_ITEM_TYPE_IPV4=11;

	/**
	 * Matches an IPv6 header.
	 *
	 * See message rte_flow_item_ipv6.
	 */
	RTE_FLOW_ITEM_TYPE_IPV6=12;

	/**
	 * Matches an ICMP header.
	 *
	 * See message rte_flow_item_icmp.
	 */
	RTE_FLOW_ITEM_TYPE_ICMP=13;

	/**
	 * Matches a UDP header.
	 *
	 * See message rte_flow_item_udp.
	 */
	RTE_FLOW_ITEM_TYPE_UDP=14;

	/**
	 * Matches a TCP header.
	 *
	 * See message rte_flow_item_tcp.
	 */
	RTE_FLOW_ITEM_TYPE_TCP=15;

	/**
	 * Matches a SCTP header.
	 *
	 * See message rte_flow_item_sctp.
	 */
	RTE_FLOW_ITEM_TYPE_SCTP=16;

	/**
	 * Matches a VXLAN header.
	 *
	 * See message rte_flow_item_vxlan.
	 */
	RTE_FLOW_ITEM_TYPE_VXLAN=17;

	/**
	 * Matches a E_TAG header.
	 *
	 * See message rte_flow_item_e_tag.
	 */
	RTE_FLOW_ITEM_TYPE_E_TAG=18;

	/**
	 * Matches a NVGRE header.
	 *
	 * See message rte_flow_item_nvgre.
	 */
	RTE_FLOW_ITEM_TYPE_NVGRE=19;

	/**
	 * Matches a MPLS header.
	 *
	 * See message rte_flow_item_mpls.
	 */
	RTE_FLOW_ITEM_TYPE_MPLS=20;

	/**
	 * Matches a GRE header.
	 *
	 * See message rte_flow_item_gre.
	 */
	RTE_FLOW_ITEM_TYPE_GRE=21;

	/**
	 * [META]
	 *
	 * Fuzzy pattern match; expect faster than default.
	 *
	 * This is for device that support fuzzy matching option.
	 * Usually a fuzzy matching is fast but the cost is accuracy.
	 *
	 * See message rte_flow_item_fuzzy.
	 */
	RTE_FLOW_ITEM_TYPE_FUZZY=22;

	/**
	 * Matches a GTP header.
	 *
	 * Configure flow for GTP packets.
	 *
	 * See message rte_flow_item_gtp.
	 */
	RTE_FLOW_ITEM_TYPE_GTP=23;

	/**
	 * Matches a GTP header.
	 *
	 * Configure flow for GTP-C packets.
	 *
	 * See message rte_flow_item_gtp.
	 */
	RTE_FLOW_ITEM_TYPE_GTPC=24;

	/**
	 * Matches a GTP header.
	 *
	 * Configure flow for GTP-U packets.
	 *
	 * See message rte_flow_item_gtp.
	 */
	RTE_FLOW_ITEM_TYPE_GTPU=25;

	/**
	 * Matches a ESP header.
	 *
	 * See message rte_flow_item_esp.
	 */
	RTE_FLOW_ITEM_TYPE_ESP=26;

	/**
	 * Matches a GENEVE header.
	 *
	 * See message rte_flow_item_geneve.
	 */
	RTE_FLOW_ITEM_TYPE_GENEVE=27;

	/**
	 * Matches a VXLAN-GPE header.
	 *
	 * See message rte_flow_item_vxlan_gpe.
	 */
	RTE_FLOW_ITEM_TYPE_VXLAN_GPE=28;

	/**
	 * Matches an ARP header for Ethernet/IPv4.
	 *
	 * See message rte_flow_item_arp_eth_ipv4.
	 */
	RTE_FLOW_ITEM_TYPE_ARP_ETH_IPV4=29;

	/**
	 * Matches the presence of any IPv6 extension header.
	 *
	 * See message rte_flow_item_ipv6_ext.
	 */
	RTE_FLOW_ITEM_TYPE_IPV6_EXT=30;

	/**
	 * Matches any ICMPv6 header.
	 *
	 * See message rte_flow_item_icmp6.
	 */
	RTE_FLOW_ITEM_TYPE_ICMP6=31;

	/**
	 * Matches an ICMPv6 neighbor discovery solicitation.
	 *
	 * See message rte_flow_item_icmp6_nd_ns.
	 */
	RTE_FLOW_ITEM_TYPE_ICMP6_ND_NS=32;

	/**
	 * Matches an ICMPv6 neighbor discovery advertisement.
	 *
	 * See message rte_flow_item_icmp6_nd_na.
	 */
	RTE_FLOW_ITEM_TYPE_ICMP6_ND_NA=33;

	/**
	 * Matches the presence of any ICMPv6 neighbor discovery option.
	 *
	 * See message rte_flow_item_icmp6_nd_opt.
	 */
	RTE_FLOW_ITEM_TYPE_ICMP6_ND_OPT=34;

	/**
	 * Matches an ICMPv6 neighbor discovery source Ethernet link-layer
	 * address option.
	 *
	 * See message rte_flow_item_icmp6_nd_opt_sla_eth.
	 */
	RTE_FLOW_ITEM_TYPE_ICMP6_ND_OPT_SLA_ETH=35;

	/**
	 * Matches an ICMPv6 neighbor discovery target Ethernet link-layer
	 * address option.
	 *
	 * See message rte_flow_item_icmp6_nd_opt_tla_eth.
	 */
	RTE_FLOW_ITEM_TYPE_ICMP6_ND_OPT_TLA_ETH=36;

	/**
	 * Matches specified mark field.
	 *
	 * See message rte_flow_item_mark.
	 */
	RTE_FLOW_ITEM_TYPE_MARK=37;

	/**
	 * [META]
	 *
	 * Matches a metadata value.
	 *
	 * See message rte_flow_item_meta.
	 */
	RTE_FLOW_ITEM_TYPE_META=38;

	/**
	 * Matches a GRE optional key field.
	 *
	 * The value should a big-endian 32bit integer.
	 *
	 * When this item present the K bit is implicitly matched as "1"
	 * in the default mask.
	 *
	 * @p spec/mask type:
	 * @code rte_be32_t * @endcode
	 */
	RTE_FLOW_ITEM_TYPE_GRE_KEY=39;

	/**
	 * Matches a GTP extension header: PDU session container.
	 *
	 * Configure flow for GTP packets with extension header type 0x85.
	 *
	 * See message rte_flow_item_gtp_psc.
	 */
	RTE_FLOW_ITEM_TYPE_GTP_PSC=40;

	/**
	 * Matches a PPPoE header.
	 *
	 * Configure flow for PPPoE session packets.
	 *
	 * See message rte_flow_item_pppoe.
	 */
	RTE_FLOW_ITEM_TYPE_PPPOES=41;

	/**
	 * Matches a PPPoE header.
	 *
	 * Configure flow for PPPoE discovery packets.
	 *
	 * See message rte_flow_item_pppoe.
	 */
	RTE_FLOW_ITEM_TYPE_PPPOED=42;

	/**
	 * Matches a PPPoE optional proto_id field.
	 *
	 * It only applies to PPPoE session packets.
	 *
	 * See message rte_flow_item_pppoe_proto_id.
	 */
	RTE_FLOW_ITEM_TYPE_PPPOE_PROTO_ID=43;

	/**
	 * Matches Network service header (NSH).
	 * See message rte_flow_item_nsh.
	 *
	 */
	RTE_FLOW_ITEM_TYPE_NSH=44;

	/**
	 * Matches Internet Group Management Protocol (IGMP).
	 * See message rte_flow_item_igmp.
	 *
	 */
	RTE_FLOW_ITEM_TYPE_IGMP=45;

	/**
	 * Matches IP Authentication Header (AH).
	 * See message rte_flow_item_ah.
	 *
	 */
	RTE_FLOW_ITEM_TYPE_AH=46;

	/**
	 * Matches a HIGIG header.
	 * see message rte_flow_item_higig2_hdr.
	 */
	RTE_FLOW_ITEM_TYPE_HIGIG2=47;

	/*
	 * [META]
	 *
	 * Matches a tag value.
	 *
	 * See message rte_flow_item_tag.
	 */
	RTE_FLOW_ITEM_TYPE_TAG=48;
}

message rte_flow_action_vf {
	uint32 reserved = 1;
	uint32 original = 2;
	uint32 id = 3;
}

enum rte_flow_action_type {
	/**
	 * End marker for action lists. Prevents further processing of
	 * actions; thereby ending the list.
	 *
	 * No associated configuration messageure.
	 */
	RTE_FLOW_ACTION_TYPE_END=0;

	/**
	 * Used as a placeholder for convenience. It is ignored and simply
	 * discarded by PMDs.
	 *
	 * No associated configuration messageure.
	 */
	RTE_FLOW_ACTION_TYPE_VOID=1;

	/**
	 * Leaves traffic up for additional processing by subsequent flow
	 * rules; makes a flow rule non-terminating.
	 *
	 * No associated configuration messageure.
	 */
	RTE_FLOW_ACTION_TYPE_PASSTHRU=2;

	/**
	 * RTE_FLOW_ACTION_TYPE_JUMP
	 *
	 * Redirects packets to a group on the current device.
	 *
	 * See message rte_flow_action_jump.
	 */
	RTE_FLOW_ACTION_TYPE_JUMP=3;

	/**
	 * Attaches an integer value to packets and sets PKT_RX_FDIR and
	 * PKT_RX_FDIR_ID mbuf flags.
	 *
	 * See message rte_flow_action_mark.
	 */
	RTE_FLOW_ACTION_TYPE_MARK=4;

	/**
	 * Flags packets. Similar to MARK without a specific value; only
	 * sets the PKT_RX_FDIR mbuf flag.
	 *
	 * No associated configuration messageure.
	 */
	RTE_FLOW_ACTION_TYPE_FLAG=5;

	/**
	 * Assigns packets to a given queue index.
	 *
	 * See message rte_flow_action_queue.
	 */
	RTE_FLOW_ACTION_TYPE_QUEUE=6;

	/**
	 * Drops packets.
	 *
	 * PASSTHRU overrides this action if both are specified.
	 *
	 * No associated configuration messageure.
	 */
	RTE_FLOW_ACTION_TYPE_DROP=7;

	/**
	 * Enables counters for this flow rule.
	 *
	 * These counters can be retrieved and reset through rte_flow_query();
	 * see message rte_flow_query_count.
	 *
	 * See message rte_flow_action_count.
	 */
	RTE_FLOW_ACTION_TYPE_COUNT=8;

	/**
	 * Similar to QUEUE; except RSS is additionally performed on packets
	 * to spread them among several queues according to the provided
	 * parameters.
	 *
	 * See message rte_flow_action_rss.
	 */
	RTE_FLOW_ACTION_TYPE_RSS=9;

	/**
	 * Directs matching traffic to the physical function (PF) of the
	 * current device.
	 *
	 * No associated configuration messageure.
	 */
	RTE_FLOW_ACTION_TYPE_PF=10;

	/**
	 * Directs matching traffic to a given virtual function of the
	 * current device.
	 *
	 * See message rte_flow_action_vf.
	 */
	RTE_FLOW_ACTION_TYPE_VF=11;

	/**
	 * Directs packets to a given physical port index of the underlying
	 * device.
	 *
	 * See message rte_flow_action_phy_port.
	 */
	RTE_FLOW_ACTION_TYPE_PHY_PORT=12;

	/**
	 * Directs matching traffic to a given DPDK port ID.
	 *
	 * See message rte_flow_action_port_id.
	 */
	RTE_FLOW_ACTION_TYPE_PORT_ID=13;

	/**
	 * Traffic metering and policing (MTR).
	 *
	 * See message rte_flow_action_meter.
	 * See file rte_mtr.h for MTR object configuration.
	 */
	RTE_FLOW_ACTION_TYPE_METER=14;

	/**
	 * Redirects packets to security engine of current device for security
	 * processing as specified by security session.
	 *
	 * See message rte_flow_action_security.
	 */
	RTE_FLOW_ACTION_TYPE_SECURITY=15;

	/**
	 * Implements OFPAT_SET_MPLS_TTL ("MPLS TTL") as defined by the
	 * OpenFlow Switch Specification.
	 *
	 * See message rte_flow_action_of_set_mpls_ttl.
	 */
	RTE_FLOW_ACTION_TYPE_OF_SET_MPLS_TTL=16;

	/**
	 * Implements OFPAT_DEC_MPLS_TTL ("decrement MPLS TTL") as defined
	 * by the OpenFlow Switch Specification.
	 *
	 * No associated configuration messageure.
	 */
	RTE_FLOW_ACTION_TYPE_OF_DEC_MPLS_TTL=17;

	/**
	 * Implements OFPAT_SET_NW_TTL ("IP TTL") as defined by the OpenFlow
	 * Switch Specification.
	 *
	 * See message rte_flow_action_of_set_nw_ttl.
	 */
	RTE_FLOW_ACTION_TYPE_OF_SET_NW_TTL=18;

	/**
	 * Implements OFPAT_DEC_NW_TTL ("decrement IP TTL") as defined by
	 * the OpenFlow Switch Specification.
	 *
	 * No associated configuration messageure.
	 */
	RTE_FLOW_ACTION_TYPE_OF_DEC_NW_TTL=19;

	/**
	 * Implements OFPAT_COPY_TTL_OUT ("copy TTL "outwards" -- from
	 * next-to-outermost to outermost") as defined by the OpenFlow
	 * Switch Specification.
	 *
	 * No associated configuration messageure.
	 */
	RTE_FLOW_ACTION_TYPE_OF_COPY_TTL_OUT=20;

	/**
	 * Implements OFPAT_COPY_TTL_IN ("copy TTL "inwards" -- from
	 * outermost to next-to-outermost") as defined by the OpenFlow
	 * Switch Specification.
	 *
	 * No associated configuration messageure.
	 */
	RTE_FLOW_ACTION_TYPE_OF_COPY_TTL_IN=21;

	/**
	 * Implements OFPAT_POP_VLAN ("pop the outer VLAN tag") as defined
	 * by the OpenFlow Switch Specification.
	 *
	 * No associated configuration messageure.
	 */
	RTE_FLOW_ACTION_TYPE_OF_POP_VLAN=22;

	/**
	 * Implements OFPAT_PUSH_VLAN ("push a new VLAN tag") as defined by
	 * the OpenFlow Switch Specification.
	 *
	 * See message rte_flow_action_of_push_vlan.
	 */
	RTE_FLOW_ACTION_TYPE_OF_PUSH_VLAN=23;

	/**
	 * Implements OFPAT_SET_VLAN_VID ("set the 802.1q VLAN id") as
	 * defined by the OpenFlow Switch Specification.
	 *
	 * See message rte_flow_action_of_set_vlan_vid.
	 */
	RTE_FLOW_ACTION_TYPE_OF_SET_VLAN_VID=24;

	/**
	 * Implements OFPAT_SET_LAN_PCP ("set the 802.1q priority") as
	 * defined by the OpenFlow Switch Specification.
	 *
	 * See message rte_flow_action_of_set_vlan_pcp.
	 */
	RTE_FLOW_ACTION_TYPE_OF_SET_VLAN_PCP=25;

	/**
	 * Implements OFPAT_POP_MPLS ("pop the outer MPLS tag") as defined
	 * by the OpenFlow Switch Specification.
	 *
	 * See message rte_flow_action_of_pop_mpls.
	 */
	RTE_FLOW_ACTION_TYPE_OF_POP_MPLS=26;

	/**
	 * Implements OFPAT_PUSH_MPLS ("push a new MPLS tag") as defined by
	 * the OpenFlow Switch Specification.
	 *
	 * See message rte_flow_action_of_push_mpls.
	 */
	RTE_FLOW_ACTION_TYPE_OF_PUSH_MPLS=27;

	/**
	 * Encapsulate flow in VXLAN tunnel as defined in
	 * rte_flow_action_vxlan_encap action messageure.
	 *
	 * See message rte_flow_action_vxlan_encap.
	 */
	RTE_FLOW_ACTION_TYPE_VXLAN_ENCAP=28;

	/**
	 * Decapsulate outer most VXLAN tunnel from matched flow.
	 *
	 * If flow pattern does not define a valid VXLAN tunnel (as specified by
	 * RFC7348) then the PMD should return a RTE_FLOW_ERROR_TYPE_ACTION
	 * error.
	 */
	RTE_FLOW_ACTION_TYPE_VXLAN_DECAP=29;

	/**
	 * Encapsulate flow in NVGRE tunnel defined in the
	 * rte_flow_action_nvgre_encap action messageure.
	 *
	 * See message rte_flow_action_nvgre_encap.
	 */
	RTE_FLOW_ACTION_TYPE_NVGRE_ENCAP=30;

	/**
	 * Decapsulate outer most NVGRE tunnel from matched flow.
	 *
	 * If flow pattern does not define a valid NVGRE tunnel (as specified by
	 * RFC7637) then the PMD should return a RTE_FLOW_ERROR_TYPE_ACTION
	 * error.
	 */
	RTE_FLOW_ACTION_TYPE_NVGRE_DECAP=31;

	/**
	 * Add outer header whose template is provided in its data buffer
	 *
	 * See message rte_flow_action_raw_encap.
	 */
	RTE_FLOW_ACTION_TYPE_RAW_ENCAP=32;

	/**
	 * Remove outer header whose template is provided in its data buffer.
	 *
	 * See message rte_flow_action_raw_decap
	 */
	RTE_FLOW_ACTION_TYPE_RAW_DECAP=33;

	/**
	 * Modify IPv4 source address in the outermost IPv4 header.
	 *
	 * If flow pattern does not define a valid RTE_FLOW_ITEM_TYPE_IPV4;
	 * then the PMD should return a RTE_FLOW_ERROR_TYPE_ACTION error.
	 *
	 * See message rte_flow_action_set_ipv4.
	 */
	RTE_FLOW_ACTION_TYPE_SET_IPV4_SRC=34;

	/**
	 * Modify IPv4 destination address in the outermost IPv4 header.
	 *
	 * If flow pattern does not define a valid RTE_FLOW_ITEM_TYPE_IPV4;
	 * then the PMD should return a RTE_FLOW_ERROR_TYPE_ACTION error.
	 *
	 * See message rte_flow_action_set_ipv4.
	 */
	RTE_FLOW_ACTION_TYPE_SET_IPV4_DST=35;

	/**
	 * Modify IPv6 source address in the outermost IPv6 header.
	 *
	 * If flow pattern does not define a valid RTE_FLOW_ITEM_TYPE_IPV6;
	 * then the PMD should return a RTE_FLOW_ERROR_TYPE_ACTION error.
	 *
	 * See message rte_flow_action_set_ipv6.
	 */
	RTE_FLOW_ACTION_TYPE_SET_IPV6_SRC=36;

	/**
	 * Modify IPv6 destination address in the outermost IPv6 header.
	 *
	 * If flow pattern does not define a valid RTE_FLOW_ITEM_TYPE_IPV6;
	 * then the PMD should return a RTE_FLOW_ERROR_TYPE_ACTION error.
	 *
	 * See message rte_flow_action_set_ipv6.
	 */
	RTE_FLOW_ACTION_TYPE_SET_IPV6_DST=37;

	/**
	 * Modify source port number in the outermost TCP/UDP header.
	 *
	 * If flow pattern does not define a valid RTE_FLOW_ITEM_TYPE_TCP
	 * or RTE_FLOW_ITEM_TYPE_UDP; then the PMD should return a
	 * RTE_FLOW_ERROR_TYPE_ACTION error.
	 *
	 * See message rte_flow_action_set_tp.
	 */
	RTE_FLOW_ACTION_TYPE_SET_TP_SRC=38;

	/**
	 * Modify destination port number in the outermost TCP/UDP header.
	 *
	 * If flow pattern does not define a valid RTE_FLOW_ITEM_TYPE_TCP
	 * or RTE_FLOW_ITEM_TYPE_UDP; then the PMD should return a
	 * RTE_FLOW_ERROR_TYPE_ACTION error.
	 *
	 * See message rte_flow_action_set_tp.
	 */
	RTE_FLOW_ACTION_TYPE_SET_TP_DST=39;

	/**
	 * Swap the source and destination MAC addresses in the outermost
	 * Ethernet header.
	 *
	 * If flow pattern does not define a valid RTE_FLOW_ITEM_TYPE_ETH;
	 * then the PMD should return a RTE_FLOW_ERROR_TYPE_ACTION error.
	 *
	 * No associated configuration messageure.
	 */
	RTE_FLOW_ACTION_TYPE_MAC_SWAP=40;

	/**
	 * Decrease TTL value directly
	 *
	 * No associated configuration messageure.
	 */
	RTE_FLOW_ACTION_TYPE_DEC_TTL=41;

	/**
	 * Set TTL value
	 *
	 * See message rte_flow_action_set_ttl
	 */
	RTE_FLOW_ACTION_TYPE_SET_TTL=42;

	/**
	 * Set source MAC address from matched flow.
	 *
	 * If flow pattern does not define a valid RTE_FLOW_ITEM_TYPE_ETH;
	 * the PMD should return a RTE_FLOW_ERROR_TYPE_ACTION error.
	 *
	 * See message rte_flow_action_set_mac.
	 */
	RTE_FLOW_ACTION_TYPE_SET_MAC_SRC=43;

	/**
	 * Set destination MAC address from matched flow.
	 *
	 * If flow pattern does not define a valid RTE_FLOW_ITEM_TYPE_ETH;
	 * the PMD should return a RTE_FLOW_ERROR_TYPE_ACTION error.
	 *
	 * See message rte_flow_action_set_mac.
	 */
	RTE_FLOW_ACTION_TYPE_SET_MAC_DST=44;

	/**
	 * Increase sequence number in the outermost TCP header.
	 *
	 * Action configuration specifies the value to increase
	 * TCP sequence number as a big-endian 32 bit integer.
	 *
	 * @p conf type:
	 * @code rte_be32_t * @endcode
	 *
	 * Using this action on non-matching traffic will result in
	 * undefined behavior.
	 */
	RTE_FLOW_ACTION_TYPE_INC_TCP_SEQ=45;

	/**
	 * Decrease sequence number in the outermost TCP header.
	 *
	 * Action configuration specifies the value to decrease
	 * TCP sequence number as a big-endian 32 bit integer.
	 *
	 * @p conf type:
	 * @code rte_be32_t * @endcode
	 *
	 * Using this action on non-matching traffic will result in
	 * undefined behavior.
	 */
	RTE_FLOW_ACTION_TYPE_DEC_TCP_SEQ=46;

	/**
	 * Increase acknowledgment number in the outermost TCP header.
	 *
	 * Action configuration specifies the value to increase
	 * TCP acknowledgment number as a big-endian 32 bit integer.
	 *
	 * @p conf type:
	 * @code rte_be32_t * @endcode

	 * Using this action on non-matching traffic will result in
	 * undefined behavior.
	 */
	RTE_FLOW_ACTION_TYPE_INC_TCP_ACK=47;

	/**
	 * Decrease acknowledgment number in the outermost TCP header.
	 *
	 * Action configuration specifies the value to decrease
	 * TCP acknowledgment number as a big-endian 32 bit integer.
	 *
	 * @p conf type:
	 * @code rte_be32_t * @endcode
	 *
	 * Using this action on non-matching traffic will result in
	 * undefined behavior.
	 */
	RTE_FLOW_ACTION_TYPE_DEC_TCP_ACK=48;

	/**
	 * Set Tag.
	 *
	 * Tag is for internal flow usage only and
	 * is not delivered to the application.
	 *
	 * See message rte_flow_action_set_tag.
	 */
	RTE_FLOW_ACTION_TYPE_SET_TAG=49;

	/**
	 * Set metadata on ingress or egress path.
	 *
	 * See message rte_flow_action_set_meta.
	 */
	RTE_FLOW_ACTION_TYPE_SET_META=50;
}